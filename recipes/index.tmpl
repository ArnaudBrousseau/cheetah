#compiler-settings 
useAutocalling=False
useLegacyImportMode=False
#end compiler-settings

#import os
#From Cheetah.Template import Template
#from Cheetah.Filters import Markdown

#import WikiRoot
#extends WikiRoot.WikiRoot

#attr PathPrefix = '../'
#attr ExecuteContentPath = 'recipes/content/'
#attr HyperlinkContentPath = 'content/'

#def pagename()
    #return 'Recipes'
#end def

#def content()
#transform Markdown
Cheetah Recipes
===============

Here are the available recipes thus far:

#for dirpath, dirnames, filenames in $os.walk($ExecuteContentPath)
    #for file in filenames
        #if file.endswith('.markdown') and $generateRecipePage($file)
* [${file.replace('_', ' ').replace('.markdown', '')}](${HyperlinkContentPath}${file.replace('.markdown', '.html')})
        #end if
    #end for
#end for 


If you're really hungry for some Cheetah recipies, you can check out the 
out-of-date [Cheetah recipes page](http://wiki.cheetahtemplate.org/cheetah-recipes.html?) 
from the old Wiki
#end def

#def generateRecipePage(filepath)
    ## Defining a highlighting function to macro-fy
    #def _highlightMacro(src)
        #from pygments import highlight
        #from pygments import lexers 
        #from pygments import formatters
        #set lexer = None
        #try
            #set lexer = lexers.guess_lexer(src)
        #except lexers.ClassNotFound
            #set lexer = lexers.PythonLexer()
        #end try

        #set formatter = formatters.HtmlFormatter(cssclass='code_highlighter')
        #set src = highlight(src, lexer, formatter)
        #set css = formatter.get_style_defs('.code_highlighter')
        #return '''<style type="text/css"> <!-- %s --> </style> %s''' % (css, src)
    #end def

    ## Open and read in the .markdown document 
    #set fd = open('%s%s' % ($ExecuteContentPath, filepath), 'r')
    #set content = fd.readlines()
    #silent fd.close()

    #set tmpl = Template('''
#from Cheetah.Filters import Markdown
#import WikiRoot
#extends WikiRoot.WikiRoot
#attr PathPrefix = '../../'
#def pagename()
    #return $PageName
#end def

#def content
#transform Markdown
%s
#end def
    ''' % (''.join(content)), 
            searchList=[{'PageName' : filepath.replace('.markdown', '')}],
            compilerSettings={'macroDirectives' : {'highlight' : _highlightMacro}})

    ## Write the results of the template's execution to a .html file
    #set fd = open('%s%s' % ($ExecuteContentPath, filepath.replace('.markdown', '.html')), 'w')
    #silent fd.write(unicode(tmpl).encode('utf-8'))
    #silent fd.close()

    #return True
#end def

